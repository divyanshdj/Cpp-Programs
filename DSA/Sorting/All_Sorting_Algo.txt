#include <bits/stdc++.h>

using namespace std;

// selection sort:- we are having n loop ,where in each 
//traverse we are finding min value in array and replace with particular i

// Time Complexity:- O(n^2)

void selectionSort(int *arr,int n){

	int minIndex;

	for(int i=0;i<n-1;i++){
		minIndex = i;
		for(int j=i;j<n;j++){
			minIndex = arr[minIndex]>arr[j]?j:minIndex;
		}
		swap(arr[i],arr[minIndex]);
	}
}

// Insertion Sort:-

// let say we have n size array , at particular instance we have first k value sorted and n-k is unsorted
// so for k+1 value we are try to place in right position if first k value by swapping

//Time Complexity:- O(n^2)

void insertionSort(int *arr,int n){
	for(int i=1;i<n;i++){
		for(int j=i-1;j>=0;j--){
			if(arr[j+1]<arr[j]){
				swap(arr[j+1],arr[j]);
			}
			else{
				break;
			}
		}
	}
}

// Bubble Sort:-

//in each traverse we are move biggest number in back of the array
// Time Complexity:- O(n^2)

void bubbleSort(int *arr,int n){
	for(int i=0;i<n;i++){
		for(int j=0;j<n-i;j++){
			if(arr[j]>arr[j+1]){
				swap(arr[j],arr[j+1]);
			}
		}
	}
}

// Merge Sort

//step1:- split array into two part
//step2:- sort them seprate O(logn)
//step3:- merge two sorted array O(n)

// Time Complexity:- O(nLogn)
// Space Complexity:- O(n)

void mergeTwoSortedArray(int *arr,int st,int end){
	int mid = (st+end)/2;
	int *temp = new int[end-st+1];
	int k=0;

	int i=st,j=mid+1;
	while(i<=mid and j<=end){
		if(arr[i]<arr[j]){
			temp[k]=arr[i];
			i++;
		}
		else{
			temp[k]=arr[j];
			j++;
		}
		k++;
	}

	while(i<=mid){
		temp[k]=arr[i];
		k++;
		i++;
	}

	while(j<=end){
		temp[k]=arr[j];
		k++;
		j++;
	}
	k=0;
	for(i=st;i<=end;i++,k++){
		arr[i]=temp[k];
	}
	return;
}

void mergeSort(int *arr,int st,int end){
	if(st>=end)return;
	int mid = (st+end)/2;

	mergeSort(arr,st,mid);
	mergeSort(arr,mid+1,end);

	mergeTwoSortedArray(arr,st,end);

	return;
}

// Quick Sort

//we choose a pivot first and then make a partition of array (st,end) with mid and 
// recursively doing same thing for (st,partition) (partition+1,end);

// Time Complexity:- O(nLogn)
// Space Complexity :- O(1)

int makePartition(int *arr,int st,int end){
	int pivot = arr[end];

	int pointer = st;
	for(int i=st;i<end;i++){
		if(arr[i]<pivot){
			swap(arr[pointer],arr[i]);
			pointer++;
		}
	}
	swap(arr[pointer],arr[end]);
	return pointer;
}

void quickSort(int *arr,int st,int end){
	if(arr==NULL)return;
	if(st>=end)return;
	int partition = makePartition(arr,st,end);
	quickSort(arr,st,partition-1);
	quickSort(arr,partition+1,end);
	return;
}

int main(){
	int arr[5] = {5,4,3,7,1};

	int n = sizeof(arr)/sizeof(int);
	quickSort(arr,0,n-1);

	for(int i=0;i<5;i++){
		cout<<arr[i]<<" ";
	}
}